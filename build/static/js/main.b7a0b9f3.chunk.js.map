{"version":3,"sources":["logo.svg","PathfindingVisualizer/Node/Node.jsx","PathfindingAlgorithms/dijkstra.js","PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["Node","props","state","this","row","col","onMouseDown","onMouseEnter","onMouseUp","className","id","React","Component","getAllNodes","grid","nodes","node","push","sortNodesByDistance","unvisitedNodes","sort","nodeA","nodeB","distance","updateUnvisitedNeighbors","unvisitedNeighbors","neighbors","length","filter","neighbor","isVisited","getUnvisitedNeighbors","prev_Node","PathfindingVisualizer","clicktype","mouse_press","initialize_grid","setState","console","log","element","document","getElementById","getElementsByClassName","prev_start","classList","remove","add","visitedNodesInOrder","shortestPath","i","setTimeout","animateShortestPath","contains","startNode","finishNode","gridStartNode","getAttribute","gridFinishNode","visitedNodes","closestrowcol","shift","closestNode","Infinity","dijkstra","currentNode","unshift","getShortestPath","animateDijkstra","walls","start","finish","visited","short","class","onClick","reset","clickwalls","clickstart","clickend","map","row_index","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.b7a0b9f3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\r\n\r\nimport './Node.css';\r\n\r\nexport default class Node extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n        };\r\n    }\r\n\r\n    render(){\r\n        const{\r\n            row,\r\n            col,\r\n            onMouseDown,\r\n            onMouseEnter,\r\n            onMouseUp\r\n        } = this.props;\r\n\r\n        return (\r\n        <div className = \"Node\"\r\n                row = {row}\r\n                col = {col}\r\n                id = {`node-${row}-${col}`}\r\n                className = {`Node`}\r\n                onMouseDown={()=>onMouseDown(row, col)}\r\n                onMouseEnter={()=>onMouseEnter(row, col)}\r\n                onMouseUp={()=>onMouseUp()}></div>\r\n        );\r\n    }\r\n}","export function dijkstra(nodes, startNode, finishNode){\r\n    const visitedNodes = [];\r\n    startNode.distance = 0;\r\n\r\n    const unvisitedNodes = getAllNodes(nodes);\r\n\r\n    while(unvisitedNodes.length!==0){\r\n        //visit node with shortest distance\r\n        sortNodesByDistance(unvisitedNodes);\r\n\r\n        const closestrowcol = unvisitedNodes.shift();\r\n        const closestNode = document.getElementById(`node-${closestrowcol.row}-${closestrowcol.col}`);\r\n\r\n        if(closestNode.classList.contains(\"wall_Node\")){\r\n            continue;\r\n        }\r\n\r\n        if(closestrowcol.distance===Infinity){\r\n            return visitedNodes;\r\n        }\r\n\r\n        closestrowcol.isVisited = true;\r\n        visitedNodes.push(closestrowcol);\r\n\r\n        if (closestNode.classList.contains(\"finish_Node\")){\r\n            return visitedNodes;\r\n        } \r\n\r\n        updateUnvisitedNeighbors(closestrowcol, nodes);\r\n    }\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n    const nodes = [];\r\n    for (const row of grid) {\r\n      for (const node of row) {\r\n        nodes.push(node);\r\n      }\r\n    }\r\n    return nodes;\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n    for (const neighbor of unvisitedNeighbors) {\r\n      neighbor.distance = node.distance + 1;//right now have unweighted graph\r\n      neighbor.prev_Node = node;\r\n    }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const {col, row} = node;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\n\r\nexport function getShortestPath(finishNode){\r\n    const shortestPath = [];\r\n    let currentNode = finishNode;\r\n    // console.log('next print is classlist');\r\n    // console.log(currentNode);\r\n    while(currentNode!==null){\r\n        shortestPath.unshift(currentNode);\r\n        currentNode = currentNode.prev_Node;\r\n    }\r\n    return shortestPath;\r\n}\r\n  \r\n\r\n\r\nexport function astar(nodes, startNode, finishNode){\r\n    const visitedNodes = [];\r\n    const openList = [];\r\n    const closedList = [];\r\n\r\n    openList.push(startNode);\r\n    const grid = getAllNodes(nodes);\r\n\r\n    while (openList.length!==0){\r\n\r\n    }\r\n\r\n    return visitedNodes;\r\n}\r\n\r\nfunction findSucc(node, grid){\r\n    const successors = [];\r\n\r\n    const {row, col} = node;\r\n\r\n    //upper left\r\n    if(row>0 && col>0) successors.push(grid[row-1][col-1]);\r\n    //upper middle\r\n    if(row>0) successors.push(grid[row-1][col]);\r\n    //upper right\r\n    if(row<20 && col>0) successors.push(grid[row+1][col-1]);\r\n    if(row>0 && col>0) successors.push(grid[row-1][col-1]);\r\n    if(row>0 && col>0) successors.push(grid[row-1][col-1]);\r\n    if(row>0 && col>0) successors.push(grid[row-1][col-1]);\r\n    if(row>0 && col>0) successors.push(grid[row-1][col-1]);\r\n    //lower right\r\n    if(row<20 && col<50) successors.push(grid[row+1][col+1]);\r\n\r\n    return successors;\r\n}","import { render } from '@testing-library/react';\r\nimport React from 'react';\r\nimport Node from './Node/Node';\r\n\r\nimport './PathfindingVisualizer.css';\r\nimport { dijkstra, getShortestPath } from '../PathfindingAlgorithms/dijkstra';\r\n\r\nexport default class PathfindingVisualizer extends React.Component{\r\n\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            nodes: [],\r\n            clicktype: \"none\",\r\n            mouse_press: false\r\n        };\r\n    }\r\n    \r\n    componentDidMount(){\r\n        const nodes = initialize_grid();\r\n        this.setState({nodes});\r\n    }\r\n\r\n    clickstart(){\r\n        this.state.clicktype = \"start_Node\";\r\n        console.log(this.state.clicktype);\r\n    }\r\n\r\n    clickend(){\r\n        this.state.clicktype = \"finish_Node\";\r\n        console.log(this.state.clicktype);\r\n    }\r\n\r\n    clickwalls(){\r\n        this.state.clicktype = \"wall_Node\";\r\n        console.log(this.state.clicktype);\r\n    }\r\n\r\n    handleMouseDown(row, col) {\r\n        // const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n        // this.setState({grid: newGrid, mouse_press: true});\r\n        const element = document.getElementById(`node-${row}-${col}`);\r\n\r\n        //there should only be one start point\r\n        if(document.getElementsByClassName('start_Node').length!==0 && this.state.clicktype==='start_Node'){\r\n            // console.log(\"two starts detected\");\r\n            const prev_start = document.getElementsByClassName('start_Node');\r\n            console.log(prev_start);\r\n            prev_start[0].classList.remove('start_Node');\r\n        }\r\n\r\n        element.classList.add(this.state.clicktype);\r\n        this.setState({mouse_press: true});\r\n\r\n        // console.log(element.classList.contains(\"wall_Node\"));\r\n        console.log(\"down\");\r\n        // console.log(`node-${row}-${col}`);\r\n        // console.log(element.classList);\r\n    }\r\n    \r\n    handleMouseEnter(row, col) {\r\n        // if (!this.state.mouse_press) return;\r\n        // const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n        // this.setState({grid: newGrid});\r\n        if (!this.state.mouse_press||this.state.clicktype!==\"wall_Node\") return;\r\n        const element = document.getElementById(`node-${row}-${col}`);\r\n        element.classList.add(this.state.clicktype);\r\n\r\n        // console.log(`node-${row}-${col}`);\r\n        // console.log(element.classList);\r\n    }\r\n\r\n    handleMouseUp() {\r\n        // this.setState({mouse_press: false});\r\n        this.setState({mouse_press: false}, () => {\r\n            console.log(this.state.mouse_press);\r\n        });\r\n        console.log(\"up\");\r\n    }\r\n\r\n    click(){\r\n\r\n    }\r\n\r\n    animateDijkstra(visitedNodesInOrder, shortestPath){\r\n        for(let i=0; i<=visitedNodesInOrder.length; i++){\r\n            if(i===visitedNodesInOrder.length){\r\n                setTimeout(()=> {\r\n                    this.animateShortestPath(shortestPath);\r\n                }, 5*i);\r\n                return;\r\n            }\r\n\r\n            setTimeout(()=> {\r\n                const node = visitedNodesInOrder[i];\r\n                const element = document.getElementById(`node-${node.row}-${node.col}`);\r\n                if(!element.classList.contains('finish_Node') && !element.classList.contains('start_Node')){\r\n                    element.classList.add(\"node-visited\");\r\n                }\r\n            }, i*5)\r\n        }\r\n    }\r\n\r\n    animateShortestPath(shortestPath){\r\n        for(let i=0; i<shortestPath.length; i++){\r\n            setTimeout(()=> {\r\n                const node = shortestPath[i];\r\n                const element = document.getElementById(`node-${node.row}-${node.col}`);\r\n\r\n                if(!element.classList.contains('finish_Node') && !element.classList.contains('start_Node')){\r\n                    element.classList.add(\"node-shortest-path\");\r\n                }\r\n\r\n            }, i*20)\r\n        }\r\n        return;\r\n    }\r\n\r\n    dijkstra(){\r\n        const grid = this.state.nodes;\r\n        const startNode = document.getElementsByClassName('start_Node');\r\n        const finishNode = document.getElementsByClassName('finish_Node');\r\n        const gridStartNode = grid[startNode[0].getAttribute(\"row\")][startNode[0].getAttribute(\"col\")];\r\n        const gridFinishNode = grid[finishNode[0].getAttribute(\"row\")][finishNode[0].getAttribute(\"col\")];\r\n\r\n        if(startNode.length===0){\r\n            console.log(\"Put a start node anywhere\");\r\n            return;\r\n        }\r\n\r\n        const visitedNodesInOrder = dijkstra(grid, gridStartNode, gridFinishNode);\r\n        const shortestPath = getShortestPath(gridFinishNode);\r\n        this.animateDijkstra(visitedNodesInOrder, shortestPath);\r\n    }\r\n\r\n    reset(){\r\n        const walls = document.getElementsByClassName('wall_Node');\r\n        while(walls.length!==0){\r\n            walls[0].classList.remove('wall_Node');\r\n        }\r\n        \r\n        const start = document.getElementsByClassName('start_Node');\r\n        while(start.length!==0){\r\n            start[0].classList.remove('start_Node');\r\n        }\r\n\r\n        const finish = document.getElementsByClassName('finish_Node');\r\n        while(finish.length!==0){\r\n            finish[0].classList.remove('finish_Node');\r\n        }\r\n\r\n        const visited = document.getElementsByClassName('node-visited');\r\n        while(visited.length!==0){\r\n            visited[0].classList.remove('node-visited');\r\n        }\r\n\r\n        const short = document.getElementsByClassName('node-shortest-path');\r\n        while(short.length!==0){\r\n            short[0].classList.remove('node-shortest-path');\r\n        }\r\n\r\n        const nodes = initialize_grid();\r\n        this.setState({nodes});\r\n    }\r\n\r\n    render(){\r\n        const{nodes} = this.state;\r\n        \r\n        return (\r\n            <div>\r\n                <div>\r\n                    <button class = 'myButton' onClick={() => this.reset()}>Reset</button>\r\n                    <button class = 'myButton' onClick={() => this.clickwalls()}>Walls</button>\r\n                    <button class = 'myButton' onClick={() => this.clickstart()}>Start Point(s)</button>\r\n                    <button class = 'myButton' onClick={() => this.clickend()}>End Point</button>\r\n                </div>\r\n                <div class=\"dropdown\">\r\n                    <button class=\"dropbtn\">Algorithms</button>\r\n                    <div class=\"dropdown-content\">\r\n                        <button onClick={() => this.dijkstra()}>Visualize Dijkstra's Algorithm</button>\r\n                    </div>\r\n                </div>\r\n                <div className = \"grid\">\r\n                    {nodes.map((row, row_index) => {\r\n                        return(\r\n                            <div key={row_index}>\r\n                                {row.map((node, nodeIdx) => {\r\n                                    const {row, col} = node;\r\n                                    return(\r\n                                        <Node\r\n                                        key = {nodeIdx}\r\n                                        col = {col}\r\n                                        row = {row}\r\n                                        id = {`node-${row}-${col}`}\r\n                                        onMouseDown = {(row, col)=> this.handleMouseDown(row, col)}\r\n                                        onMouseEnter = {(row, col) => this.handleMouseEnter(row, col)}\r\n                                        onMouseUp = {()=> this.handleMouseUp()}></Node>\r\n                                    )\r\n                                })}\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst initialize_grid = () => {\r\n    const grid = [];\r\n    for (let row = 0; row < 20; row++) {\r\n        const currentRow = [];\r\n        for (let col = 0; col < 50; col++) {\r\n            currentRow.push(createNode(row, col));\r\n        }\r\n        grid.push(currentRow);\r\n  }\r\n  return grid;\r\n}\r\n\r\nconst createNode = (row, col) =>{\r\n    return {\r\n        row,\r\n        col,\r\n        distance: Infinity,\r\n        isVisited: false,\r\n        prev_Node: null,\r\n    }\r\n}\r\n\r\n","import logo from './logo.svg';\nimport './App.css';\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">  \n      <PathfindingVisualizer></PathfindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}